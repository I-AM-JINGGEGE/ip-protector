name: Android CI

on:
  push:
    tags:
      - 'release_gp_*'
      - 'release_xiaomi_*'
      - 'release_samsung_*'
      - 'release_transsion_*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: armv7-linux-androideabi,aarch64-linux-android,i686-linux-android,x86_64-linux-android
          override: true

      - name: Install Rust targets
        run: |
          source $HOME/.cargo/env
          rustup target add armv7-linux-androideabi
          rustup target add aarch64-linux-android
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
          rustup show

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Write Keystore File
        run: |
          echo "Creating keystore file..."
          echo "KEYSTORE_FILE length: ${#KEYSTORE_FILE}"
          if [ -z "${{ secrets.KEYSTORE_FILE }}" ]; then
            echo "ERROR: KEYSTORE_FILE secret is empty!"
            exit 1
          fi
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > keystore.jks
          echo "Keystore file created:"
          ls -la keystore.jks
          echo "Keystore file size: $(wc -c < keystore.jks) bytes"

      - name: Create keystore.properties
        run: |
          echo "Creating keystore.properties..."
          echo "Key alias length: ${#KEYSTORE_PASSWORD}"
          cat > keystore.properties << EOF
          keyPassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          EOF
          echo "keystore.properties created:"
          cat keystore.properties

      - name: Verify Keystore
        run: |
          echo "Verifying keystore file and password..."
          
          # Check if keystore file exists and has content
          if [ ! -f keystore.jks ]; then
            echo "ERROR: keystore.jks file not found!"
            exit 1
          fi
          
          echo "Keystore file size: $(wc -c < keystore.jks) bytes"
          
          if [ ! -s keystore.jks ]; then
            echo "ERROR: keystore.jks file is empty!"
            exit 1
          fi
          
          # Check if secrets are provided
          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "ERROR: KEYSTORE_PASSWORD secret is empty!"
            exit 1
          fi
          
          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "ERROR: KEY_ALIAS secret is empty!"
            exit 1
          fi
          
          echo "Password length: ${#KEYSTORE_PASSWORD}"
          echo "Alias: ${{ secrets.KEY_ALIAS }}"
          
          # Test keystore password using keytool
          if ! keytool -list -keystore keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" > /dev/null 2>&1; then
            echo "ERROR: Invalid keystore password!"
            exit 1
          fi
          
          # Test key alias
          if ! keytool -list -keystore keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" > /dev/null 2>&1; then
            echo "ERROR: Invalid key alias!"
            exit 1
          fi
          
          echo "Keystore verification successful!"

      - name: Determine build variant
        id: build-variant
        run: |
          if [[ $GITHUB_REF == refs/tags/release_gp_* ]]; then
            echo "variant=releaseFlavorGpRelease" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/release_xiaomi_* ]]; then
            echo "variant=releaseFlavorXiaomiRelease" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/release_samsung_* ]]; then
            echo "variant=releaseFlavorSamsungRelease" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/release_transsion_* ]]; then
            echo "variant=releaseFlavorTranssionRelease" >> $GITHUB_OUTPUT
          fi

      - name: Build AAB
        shell: bash
        run: |
          source $HOME/.cargo/env
          echo "Checking environment..."
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "CARGO_TARGET_DIR: $CARGO_TARGET_DIR"
          echo "CARGO_PROFILE: $CARGO_PROFILE"
          echo "RUST_BACKTRACE: $RUST_BACKTRACE"
          echo "PATH: $PATH"
          echo "Checking Rust targets..."
          rustup target list --installed
          echo "Building..."
          java -version
          ./gradlew bundle${{ steps.build-variant.outputs.variant }}
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx6g -XX:+HeapDumpOnOutOfMemoryError"
          ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018
          ANDROID_NDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018
          PATH: $HOME/.cargo/bin:${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018/toolchains/llvm/prebuilt/linux-x86_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          CC_armv7_linux_androideabi: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang
          CC_aarch64_linux_android: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          CC_i686_linux_android: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang
          CC_x86_64_linux_android: ${{ env.ANDROID_SDK_ROOT }}/ndk/27.2.12479018/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang
          CARGO_TARGET_DIR: ${{ github.workspace }}/core/src/main/rust/shadowsocks-rust/target
          CARGO_HOME: ${{ github.workspace }}/.cargo
          CARGO_PROFILE: release
          RUST_BACKTRACE: 1
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle-${{ steps.build-variant.outputs.variant }}
          path: app/build/outputs/bundle/**/*.aab
          if-no-files-found: error